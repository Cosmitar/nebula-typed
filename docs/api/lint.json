[
  {
    "name": "Behaviour#reset",
    "filePath": "src/behaviour/Behaviour.js",
    "lines": [
      {
        "lineNumber": 41,
        "line": "  /**"
      },
      {
        "lineNumber": 42,
        "line": "   * Reset this behaviour's parameters"
      },
      {
        "lineNumber": 43,
        "line": "   *"
      },
      {
        "lineNumber": 44,
        "line": "   * @method reset"
      },
      {
        "lineNumber": 45,
        "line": "   * @param {Number} this behaviour's life"
      },
      {
        "lineNumber": 46,
        "line": "   * @param {String} this behaviour's easing"
      },
      {
        "lineNumber": 47,
        "line": "   */"
      },
      {
        "lineNumber": 48,
        "line": "  reset(life, easing) {"
      }
    ],
    "codeParams": [
      "life",
      "easing"
    ],
    "docParams": [
      "this",
      "this"
    ]
  },
  {
    "name": "Behaviour#applyBehaviour",
    "filePath": "src/behaviour/Behaviour.js",
    "lines": [
      {
        "lineNumber": 81,
        "line": "  /**"
      },
      {
        "lineNumber": 82,
        "line": "   * Apply this behaviour for all particles every time"
      },
      {
        "lineNumber": 83,
        "line": "   *"
      },
      {
        "lineNumber": 84,
        "line": "   * @method applyBehaviour"
      },
      {
        "lineNumber": 85,
        "line": "   * @param {Particle} particle"
      },
      {
        "lineNumber": 86,
        "line": "   * @param {Number} the integrate time 1/ms"
      },
      {
        "lineNumber": 87,
        "line": "   */"
      },
      {
        "lineNumber": 88,
        "line": "  applyBehaviour(particle, time) {"
      }
    ],
    "codeParams": [
      "particle",
      "time"
    ],
    "docParams": [
      "particle",
      "the"
    ]
  },
  {
    "name": "Rotate#reset",
    "filePath": "src/behaviour/Rotate.js",
    "lines": [
      {
        "lineNumber": 49,
        "line": "  /**"
      },
      {
        "lineNumber": 50,
        "line": "   * Resets the behaviour properties."
      },
      {
        "lineNumber": 51,
        "line": "   *"
      },
      {
        "lineNumber": 52,
        "line": "   * @param {number} x - X axis rotation"
      },
      {
        "lineNumber": 53,
        "line": "   * @param {number} y - Y axis rotation"
      },
      {
        "lineNumber": 54,
        "line": "   * @param {number} z - Z axis rotation"
      },
      {
        "lineNumber": 55,
        "line": "   * @param {number} life - the life of the behaviour"
      },
      {
        "lineNumber": 56,
        "line": "   * @param {function} easing - the easing equation to use for transforms"
      },
      {
        "lineNumber": 57,
        "line": "   * @return void"
      },
      {
        "lineNumber": 58,
        "line": "   */"
      },
      {
        "lineNumber": 59,
        "line": "  reset(a, b, c, life, easing) {"
      }
    ],
    "codeParams": [
      "a",
      "b",
      "c",
      "life",
      "easing"
    ],
    "docParams": [
      "x",
      "y",
      "z",
      "life",
      "easing"
    ]
  },
  {
    "name": "Scale#reset",
    "filePath": "src/behaviour/Scale.js",
    "lines": [
      {
        "lineNumber": 23,
        "line": "  /**"
      },
      {
        "lineNumber": 24,
        "line": "   * Resets the behaviour properties."
      },
      {
        "lineNumber": 25,
        "line": "   *"
      },
      {
        "lineNumber": 26,
        "line": "   * @param {number} scaleA - the starting scale value"
      },
      {
        "lineNumber": 27,
        "line": "   * @param {?number} scaleB - the ending scale value"
      },
      {
        "lineNumber": 28,
        "line": "   * @param {number} life - the life of the behaviour"
      },
      {
        "lineNumber": 29,
        "line": "   * @param {function} easing - the easing equation to use for transforms"
      },
      {
        "lineNumber": 30,
        "line": "   * @return void"
      },
      {
        "lineNumber": 31,
        "line": "   */"
      },
      {
        "lineNumber": 32,
        "line": "  reset(a, b, life, easing) {"
      }
    ],
    "codeParams": [
      "a",
      "b",
      "life",
      "easing"
    ],
    "docParams": [
      "scaleA",
      "scaleB",
      "life",
      "easing"
    ]
  },
  {
    "name": "Proton#addRender",
    "filePath": "src/core/Proton.js",
    "lines": [
      {
        "lineNumber": 34,
        "line": "  /**"
      },
      {
        "lineNumber": 35,
        "line": "   * @name add a type of Renderer"
      },
      {
        "lineNumber": 36,
        "line": "   *"
      },
      {
        "lineNumber": 37,
        "line": "   * @method addRender"
      },
      {
        "lineNumber": 38,
        "line": "   * @param {Renderer} render"
      },
      {
        "lineNumber": 39,
        "line": "   */"
      },
      {
        "lineNumber": 40,
        "line": "  addRender(renderer) {"
      }
    ],
    "codeParams": [
      "renderer"
    ],
    "docParams": [
      "render"
    ]
  },
  {
    "name": "Proton#removeRender",
    "filePath": "src/core/Proton.js",
    "lines": [
      {
        "lineNumber": 58,
        "line": "  /**"
      },
      {
        "lineNumber": 59,
        "line": "   * @name add a type of Renderer"
      },
      {
        "lineNumber": 60,
        "line": "   *"
      },
      {
        "lineNumber": 61,
        "line": "   * @method addRender"
      },
      {
        "lineNumber": 62,
        "line": "   * @param {Renderer} render"
      },
      {
        "lineNumber": 63,
        "line": "   */"
      },
      {
        "lineNumber": 64,
        "line": "  removeRender(renderer) {"
      }
    ],
    "codeParams": [
      "renderer"
    ],
    "docParams": [
      "render"
    ]
  },
  {
    "name": "log",
    "filePath": "src/debug/log.js",
    "lines": [
      {
        "lineNumber": 0,
        "line": "/**"
      },
      {
        "lineNumber": 1,
        "line": " * You can use this emit particles."
      },
      {
        "lineNumber": 2,
        "line": " *"
      },
      {
        "lineNumber": 3,
        "line": " * This method will console.log the fixed number of your info  in updata or requestAnimationFrame"
      },
      {
        "lineNumber": 4,
        "line": " *"
      },
      {
        "lineNumber": 5,
        "line": " * use like this log('+12',mc); log 12 times"
      },
      {
        "lineNumber": 6,
        "line": " *"
      },
      {
        "lineNumber": 7,
        "line": " * @class Log"
      },
      {
        "lineNumber": 8,
        "line": " * @constructor"
      },
      {
        "lineNumber": 9,
        "line": " * @param {*} logInfo;"
      },
      {
        "lineNumber": 10,
        "line": " */"
      },
      {
        "lineNumber": 11,
        "line": "export default function() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "logInfo;"
    ]
  },
  {
    "name": "BehaviourEmitter#addSelfBehaviour",
    "filePath": "src/emitter/BehaviourEmitter.js",
    "lines": [
      {
        "lineNumber": 17,
        "line": "  /**"
      },
      {
        "lineNumber": 18,
        "line": "   * add the Behaviour to emitter;"
      },
      {
        "lineNumber": 19,
        "line": "   *"
      },
      {
        "lineNumber": 20,
        "line": "   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);"
      },
      {
        "lineNumber": 21,
        "line": "   * @method addSelfBehaviour"
      },
      {
        "lineNumber": 22,
        "line": "   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')"
      },
      {
        "lineNumber": 23,
        "line": "   */"
      },
      {
        "lineNumber": 24,
        "line": "  addSelfBehaviour() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "behaviour"
    ]
  },
  {
    "name": "Emitter#addInitialize",
    "filePath": "src/emitter/Emitter.js",
    "lines": [
      {
        "lineNumber": 148,
        "line": "  /**"
      },
      {
        "lineNumber": 149,
        "line": "   * add the Initialize to particles;"
      },
      {
        "lineNumber": 150,
        "line": "   *"
      },
      {
        "lineNumber": 151,
        "line": "   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);"
      },
      {
        "lineNumber": 152,
        "line": "   * @method addInitialize"
      },
      {
        "lineNumber": 153,
        "line": "   * @param {Initialize} initialize like this new Radius(1, 12)"
      },
      {
        "lineNumber": 154,
        "line": "   */"
      },
      {
        "lineNumber": 155,
        "line": "  addInitialize() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "initialize"
    ]
  },
  {
    "name": "Emitter#removeInitialize",
    "filePath": "src/emitter/Emitter.js",
    "lines": [
      {
        "lineNumber": 178,
        "line": "  /**"
      },
      {
        "lineNumber": 179,
        "line": "   * remove the Initialize"
      },
      {
        "lineNumber": 180,
        "line": "   * @method removeInitialize"
      },
      {
        "lineNumber": 181,
        "line": "   * @param {Initialize} initialize a initialize"
      },
      {
        "lineNumber": 182,
        "line": "   */"
      },
      {
        "lineNumber": 183,
        "line": "  removeInitialize(initializer) {"
      }
    ],
    "codeParams": [
      "initializer"
    ],
    "docParams": [
      "initialize"
    ]
  },
  {
    "name": "Emitter#addBehaviour",
    "filePath": "src/emitter/Emitter.js",
    "lines": [
      {
        "lineNumber": 196,
        "line": "  /**"
      },
      {
        "lineNumber": 197,
        "line": "   * add the Behaviour to particles;"
      },
      {
        "lineNumber": 198,
        "line": "   *"
      },
      {
        "lineNumber": 199,
        "line": "   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);"
      },
      {
        "lineNumber": 200,
        "line": "   * @method addBehaviour"
      },
      {
        "lineNumber": 201,
        "line": "   * @param {Behaviour} behaviour like this new Color('random')"
      },
      {
        "lineNumber": 202,
        "line": "   */"
      },
      {
        "lineNumber": 203,
        "line": "  addBehaviour() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "behaviour"
    ]
  },
  {
    "name": "Position#reset",
    "filePath": "src/initialize/Position.js",
    "lines": [
      {
        "lineNumber": 19,
        "line": "  /**"
      },
      {
        "lineNumber": 20,
        "line": "   * Resets the initializer properties."
      },
      {
        "lineNumber": 21,
        "line": "   * Clears all previously set zones and resets the zones according to args passed."
      },
      {
        "lineNumber": 22,
        "line": "   *"
      },
      {
        "lineNumber": 23,
        "line": "   * @param {Zone|array<Zone>} zones - The zones to use to calculate particle starting position."
      },
      {
        "lineNumber": 24,
        "line": "   * @return void"
      },
      {
        "lineNumber": 25,
        "line": "   */"
      },
      {
        "lineNumber": 26,
        "line": "  reset() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "zones"
    ]
  },
  {
    "name": "Position#addZone",
    "filePath": "src/initialize/Position.js",
    "lines": [
      {
        "lineNumber": 39,
        "line": "  /**"
      },
      {
        "lineNumber": 40,
        "line": "   * Adds a zone or zones to this.zones."
      },
      {
        "lineNumber": 41,
        "line": "   *"
      },
      {
        "lineNumber": 42,
        "line": "   * @param {Zone|array<Zone>} zones - The zones to use to calculate particle starting position."
      },
      {
        "lineNumber": 43,
        "line": "   * @return void"
      },
      {
        "lineNumber": 44,
        "line": "   */"
      },
      {
        "lineNumber": 45,
        "line": "  addZone() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "zones"
    ]
  }
]